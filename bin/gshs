#!/usr/bin/env python
#
# Name: 		Global SSH Server config
# Description:	remove, delete, edit database. 
#				restart server
# 
#
# Author: 		Nguyen Thanh Hiep - Nguyen Huu Dinh
# Time: 		2014/10
# Requirements: python, pymongo
#

import sys
import os
import time
from optparse 	import OptionParser
from optparse 	import OptionGroup
from gshs 		import Database
from gshs 		import Machines
from gshs  		import APInets
try:
	conn = Database()
	database = conn.connect()
	datatype = conn.database
except:
	raise Exception("Database Error: can connect to database")

def Main():
	parser = OptionParser(description='global-ssh Server',
                                   prog='global-ssh-server',
                                   version='1.1.2',
                                   usage='%prog [-h] or [--help] to view help\n\t[-q] to quit program')
	group = OptionGroup(parser, "Machine")
	group.add_option("-m", "--machine", action ='store_true', default=False,
        help="remove all machine")
	parser.add_option_group(group)

	group = OptionGroup(parser, "Network")	#create group of parser
	group.add_option("-n", "--network", action ='store_true', default=False,
        help="-remove all machine of network") # add option parser
	parser.add_option_group(group)

	options, args = parser.parse_args()
	processparser(options)
def superuser():
	if os.geteuid() != 0:
		print "You must a root to run this action!"
		args = ['sudo', sys.executable] + sys.argv + [os.environ]
		# the next line replaces the currently-running process with the sudo
		os.execlpe('sudo', *args)

def processparser(options):
	if options.machine:
		m = Machines(database, datatype)
		m.removeall()

	if options.network:
		n = APInets(database, datatype)
		n.removeall()
if __name__ == "__main__":
	Main()